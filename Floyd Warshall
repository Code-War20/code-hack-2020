#include<stdio.h>

int Min(int a, int b)
{
	if(a<b)
	    return(a);
    else
  		return(b);
}

void Floyd(int arr[10][10], int n)
{
	int i,j,k;
	for(i=1;i<=n;i++)
	{
  		for(j=1;j<=n;j++)
   		{
   			for(k=1;k<=n;k++)
    		{
				if(j==k)
	 				arr[j][k]=0;
	    		else
    				arr[j][k]=Min(arr[j][k],arr[j][i]+arr[i][k]);
			}
		}
  	}
}

int main()
{
	int arr[10][10],w,n,e,u,v,i,j;;
	printf("\n Enter the number of vertices:");
 	scanf("%d",&n);
 	printf("\n Enter the number of edges:");
 	scanf("%d",&e);
 	for(i=1;i<=n;i++)
 	{
 		for(j=1;j<=n;j++)
 		{
	   		arr[i][j]=1111;
 		}
 	}
	for(i=1;i<=e;i++)
 	{
  		printf("\n Enter the end vertices of edge%d with its weight: ",i);
  		scanf("%d%d%d",&u,&v,&w);
  		arr[u][v]=w;
 	}
 	printf("\n Matrix of input data:\n");
 	for(i=1;i<=n;i++)
 	{
  		for(j=1;j<=n;j++)
		{
   			printf("%d \t",arr[i][j]);
   		}
		printf("\n");
 	}
 	Floyd(arr,n);
 	printf("\n Transitive closure:\n");
 	for(i=1;i<=n;i++)
 	{
  		for(j=1;j<=n;j++)
  		{
   			printf("%d \t",arr[i][j]);
   		}
		printf("\n");
 	}
 	printf("\n The shortest paths are:\n");
 	for(i=1;i<=n;i++)
 	{
  		for(j=1;j<=n;j++)
  		{
   			if(i!=j)
			{
			    printf("\n <%d,%d>=%d",i,j,arr[i][j]);
  			}
		}
	}
	return 0;
}
